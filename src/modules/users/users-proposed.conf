# SPDX-FileCopyrightText: no
# SPDX-License-Identifier: CC0-1.0


### GROUPS

defaultGroups:
    - name: users
      must_exist: true
      system: true
    - lp
    - video
    - network
    - storage
    - name: wheel
      must_exist: false
      system: true
    - audio
# Sets the groups for the created user.
# Shall match the target distro defaults.
# If "must_exist: true", a missing group aborts the install.
# Otherwise it is created.
# If "system: true", its GID is set <1000.
# Otherwise it is >=1000.

sudoersGroup: wheel
# Sets which group can use sudo at "/etc/sudoers.d/10-installer".
# Must be a group in "defaultGroups".
# Check that your distro already doesn't do this through a package.

autologinGroup: autologin
# Group needed only by some distros for autologin to work.
# Only users in this group can log directly into the desktop without typing
# their password.


### ADMINS

sudoersConfigureWithGroup: false
# Sets if an admin can execute "sudo" as another group.

setRootPassword: true
# Allows setting a root password during install.
# If "false" the root account is disabled.

doReusePassword: true
# Sets the initial state of the checkbox "reuse password for root".
# Uses the same password for root than the created user.
# Requires "setRootPassword: true".


### AUTHENTICATION

doAutologin: false
# Sets the initial state of the autologin checkbox. The user can change it.
# Autologin logs the user into the desktop without asking for their password.
# The password is still asked when performing administrative tasks.

passwordRequirements:
    minLength: 8
    maxLength: 64
    libpwquality:
        - minlen=6
        - maxrepeat=3
        - maxsequence=3
        - usersubstr=4
        - badwords=user password linux
# Setting "minLength" or "maxLength" to "-1" disables these checks.
#
# The "libpwquality" checks only work if "libpwquality" is installed.
# Statements supported by "libpwquality" at "man pwquality.conf".
# Additional statements may be implemented in "CheckPWQuality.cpp".
# And wired into "UsersPage.cpp".
#
# These defaults follow NIST password guidelines.
# Lesser requirements may expose the system to priviledge escalation.
# Strict requirements may be annoying, making most users keep their passwords
# at glance.

allowWeakPasswords: true
# Shows the checkbox "require strong password".
# Otherwise the password must always satisfy the requirements.

allowWeakPasswordsDefault: false
# Sets if the checkbox "require strong password" is unchecked by default.
# When unchecked the user is only warned that they are using a weak password.

user:
  shell: /bin/bash
  forbidden_names: [ root nobody ]
# "shell: empty" relies on the shell at "/etc/default/useradd".
# "forbidden_names" reserves user names for special purposes, like "video" or
# "mysql".

hostname:
  location: Etc
  writeHostsFile: true
  template: "${product}"
  forbidden_names: [ localhost ]
# "location" establishes how the hostname is set:
#   - "None" for no hostname.
#   - "Etc" for writting it into "/etc/hostname".
#   - "Hostnamed" for using systemd-hostnamed over dbus.
#   - "Transient" for removing "/etc/hostname" from the target.
#
# "writeHostsFile" creates "/etc/hosts", which lists host network addresses.
#
# "template" makes a suggestion for the hostname based on the following vars:
#   - "${first}" for the user first name.
#   - "${name}" for the user full name.
#   - "${login}" for the user login name.
#   - "${product}" for the hardware product.
#   - "${product2}" for the software product.
#   - "${cpu}" for the CPU.
#   - "${host}" for the current hostname, which can be transient.
#
# "forbidden_names" sets which hostnames cannot be used, as they will cause
# problems.

presets:
    fullName:
        value:
        editable: true
    loginName:
        value:
        editable: true
